
((digest . "a9069d06da6d3a6f9c817de52849e304") (undo-list nil (278 . 305) (#("// 関数名：isCirclecledPt()" 0 3 (fontified t c-in-sws t face font-lock-comment-delimiter-face) 3 23 (fontified t c-in-sws t face font-lock-comment-face)) . 278) (628 . 688) (#("bool isCirclecledPt( Node p0,Node p1, Node p2, Node p3 )" 0 1 (fontified t c-is-sws t face font-lock-type-face) 1 3 (fontified t face font-lock-type-face) 3 4 (fontified t c-type c-decl-id-start face font-lock-type-face) 4 5 (fontified t) 5 19 (fontified t face font-lock-function-name-face) 19 20 (fontified t c-type c-decl-arg-start) 20 21 (fontified t) 21 25 (fontified t face font-lock-type-face) 25 26 (fontified t) 26 28 (fontified t face font-lock-variable-name-face) 28 29 (fontified t c-type c-decl-arg-start) 29 33 (fontified t face font-lock-type-face) 33 34 (fontified t) 34 36 (fontified t face font-lock-variable-name-face) 36 37 (fontified t c-type c-decl-arg-start) 37 38 (fontified t) 38 42 (fontified t face font-lock-type-face) 42 43 (fontified t) 43 45 (fontified t face font-lock-variable-name-face) 45 46 (fontified t c-type c-decl-arg-start) 46 47 (fontified t) 47 51 (fontified t face font-lock-type-face) 51 52 (fontified t) 52 54 (fontified t face font-lock-variable-name-face) 54 56 (fontified t)) . 628) (3042 . 3091) ("    if( typeid(*edge[i]) == typeid(Circle) ){" . 3042) (3088 . 3151) ("      Circle *c       = dynamic_cast<Circle*>(edge[i]);" . 3088) (3754 . 3803) ("    if( typeid(*edge[i]) == typeid(Circle) ){" . 3754) (3800 . 3863) ("      Circle *c       = dynamic_cast<Circle*>(edge[i]);" . 3800) (18255 . 18295) ("  if( typeid(*e) ==typeid(Circle) ){" . 18255) (18292 . 18342) ("    Circle *c  = dynamic_cast<Circle*>(e);" . 18292) (18335 . 18442) ("    Circle *c1 = new Circle( new_node, c->p[1],  c->center.x, c->center.y,  c->theta*(num-1)/num );" . 18335) (18435 . 18541) ("    Circle *c2 = new Circle( c->p[0] , new_node, c->center.x, c->center.y, c->theta/num         );" . 18435) (22473 . 22507) ("    bool isCirclecled = false;" . 22473) (22567 . 22636) ("      for(unsigned int i=0; i<edge.size() && !isCirclecled; i++){" . 22567) (22633 . 22685) ("        if( typeid(*edge[i]) != typeid(Circle) )" . 22633) (22792 . 22859) ("            Circle *c     = dynamic_cast<Circle*>(edge[i]);" . 22792) (23249 . 23289) ("                isCirclecled = true;" . 23249) (23542 . 23605) ("//     cout << \"isCirclecled \" << isCirclecled << endl;" . 23542) (24154 . 24186) ("    if( !isCirclecled ){    " . 24154) (24517 . 24563) ("    if( isCirclecled ) removeIllegalTri();" . 24517) (t . 1394627905) nil (1342 . 1368) (#("// 渡す線分はStraightであること．" 0 22 (fontified nil c-in-sws t)) . 1342) (1559 . 1609) (#("bool isCrossed( Straight e1, Straight e2 )" 0 42 (fontified nil)) . 1559) (15650 . 15699) (#("    Straight  diagLine,shareLine;  // 対角線，共有線" 0 45 (fontified nil)) . 15650) (18695 . 18749) (#("    Straight *c  = dynamic_cast<Straight*>(e);" 0 46 (fontified nil)) . 18695) (18742 . 18803) (#("    Straight *c1 = new Straight( new_node, c->p[1] );" 0 53 (fontified nil)) . 18742) (18796 . 18857) (#("    Straight *c2 = new Straight( c->p[0],  new_node);" 0 53 (fontified nil)) . 18796) (19556 . 19581) (#("    Straight  test_e;" 0 21 (fontified nil)) . 19556) (21843 . 21871) (#("    // 最長辺をStraightとして取得" 0 5 (fontified nil c-in-sws t c-is-sws t) 5 24 (fontified nil c-in-sws t)) . 21843) (21868 . 21907) (#("    Straight e( t->p[0], t->p[1] );" 0 35 (fontified nil)) . 21868) (22667 . 22739) (#("          if( *edge[i] == Straight( tmp->p[j] , tmp->p[(j+1)%3] ) ){" 0 68 (fontified nil)) . 22667) (28240 . 28307) (#("// 	      if( isCrossed( Straight(edge[k]->p[0],edge[k]->p[1])," 0 63 (fontified nil c-in-sws t)) . 28240) (28304 . 28369) (#("// 			     Straight(tt->p[l], tt->p[(l+1)%3]) ) ) crosscnt++;" 0 61 (fontified nil)) . 28304) (32103 . 32190) (#("        Straight e1(    tBase->p[(tBcntrInd+1)%3],     tBase->p[(tBcntrInd+2)%3] );" 0 8 (fontified nil c-is-sws t c-in-sws t) 8 9 (fontified nil c-is-sws t) 9 83 (fontified nil)) . 32103) (32187 . 32275) (#("        Straight e2( tBaseNei->p[tBNcntrInd],       tBaseNei->p[(tBNcntrInd+1)%3] );" 0 84 (fontified nil)) . 32187) 1 (t . 1394457386) nil undo-tree-canary))
